services:
  app:
    build: .
    entrypoint: .docker/entrypoint.sh
    container_name: ${CONTAINER_NAME}-app
    ports:
      - '${APP_PORT}:3000'
      - '5555:5555'
      - '9229:9229'
    volumes:
      - .:/home/node/app
    environment:
      - MAIL_FROM=${MAIL_FROM}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=${DB_SCHEMA}
      - REDIS_HOST=${REDIS_HOST}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      maildev:
        condition: service_started
    networks:
      - app-network

  maildev:
    image: maildev/maildev
    container_name: ${CONTAINER_NAME}-maildev
    ports:
      - '1080:1080' # Web UI para ver os e-mails
      - '1025:1025' # Porta SMTP para a aplicação se conectar
    networks:
      - app-network

  db:
    build: .docker/postgres
    container_name: ${CONTAINER_NAME}-db
    restart: always
    tty: true
    ports:
      - '${DB_PORT}:5432'
    volumes:
      - .docker/postgres/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    container_name: ${CONTAINER_NAME}-redis
    image: redis:alpine
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
