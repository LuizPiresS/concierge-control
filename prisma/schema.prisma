generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  password  String
  isDeleted Boolean  @default(false)
  isActive  Boolean  @default(false)
  profile   Profile?

  // --- RELAÇÃO ADICIONADA ---
  // Campo para armazenar o ID do condomínio ao qual o usuário pertence.
  condominiumId String      @db.Uuid
  // Campo de relação que conecta este usuário a uma instância de Condominium.
  condominium   Condominium @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  // --- FIM DA RELAÇÃO ---

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Adiciona um índice na chave estrangeira para otimizar as buscas.
  @@index([condominiumId])
  @@map("users")
}

model Profile {
  id                     String   @id @default(uuid()) @db.Uuid
  name                   String
  identificationDocument String   @map("identification_document")
  cellPhone              String   @map("cell_phone")
  photoUrl               String?  @map("photo_url")
  street                 String
  number                 String
  neighborhood           String
  dueDate                String   @map("due_date")
  billingEmail           String   @map("billing_email")
  userId                 String   @unique @db.Uuid
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId], name: "idx_user_id")
  @@map("profiles")
}

model Condominium {
  id   String @id @default(uuid()) @db.Uuid
  name String // Nome Fantasia do condomínio
  cnpj String @unique

  // --- Endereço Detalhado ---
  street       String // Logradouro (Rua, Avenida, etc.)
  number       String // Número do estabelecimento
  complement   String? // Complemento (Bloco, Sala, Andar). Opcional.
  neighborhood String // Bairro
  city         String // Cidade
  state        String // Estado (UF, ex: "SP")
  zipCode      String  @map("zip_code") // CEP

  // --- Informações de Contato ---
  phone String? // Telefone principal de contato. Opcional.
  email String? @unique // E-mail principal de contato. Opcional e único.

  // --- Inscrições Fiscais (Opcionais) ---
  stateRegistration     String? @unique @map("state_registration") // Inscrição Estadual
  municipalRegistration String? @unique @map("municipal_registration") // Inscrição Municipal

  // --- Outros ---
  logoUrl String? @map("logo_url") // URL para a logomarca do condomínio

  // --- RELAÇÃO ADICIONADA ---
  // Campo de relação que permite acessar a lista de usuários deste condomínio.
  users User[]
  // --- FIM DA RELAÇÃO ---

  // --- Campos de Controle ---
  isDeleted Boolean @default(false)
  isActive  Boolean @default(true) // Faz mais sentido um novo registro começar ativo

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("condominiums")
}
